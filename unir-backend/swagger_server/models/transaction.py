# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, account_id: int=None, amount: int=None, description: str=None, current_balance: int=None, transaction_date: str=None):  # noqa: E501
        """Transaction - a model defined in Swagger

        :param id: The id of this Transaction.  # noqa: E501
        :type id: int
        :param account_id: The account_id of this Transaction.  # noqa: E501
        :type account_id: int
        :param amount: The amount of this Transaction.  # noqa: E501
        :type amount: int
        :param description: The description of this Transaction.  # noqa: E501
        :type description: str
        :param current_balance: The current_balance of this Transaction.  # noqa: E501
        :type current_balance: int
        :param transaction_date: The transaction_date of this Transaction.  # noqa: E501
        :type transaction_date: str
        """
        self.swagger_types = {
            'id': int,
            'account_id': int,
            'amount': int,
            'description': str,
            'current_balance': int,
            'transaction_date': str
        }

        self.attribute_map = {
            'id': 'id',
            'account_id': 'account_id',
            'amount': 'amount',
            'description': 'description',
            'current_balance': 'current_balance',
            'transaction_date': 'transaction_date'
        }

        self._id = id
        self._account_id = account_id
        self._amount = amount
        self._description = description
        self._current_balance = current_balance
        self._transaction_date = transaction_date

    @classmethod
    def from_dict(cls, dikt) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transaction of this Transaction.  # noqa: E501
        :rtype: Transaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Transaction.


        :return: The id of this Transaction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Transaction.


        :param id: The id of this Transaction.
        :type id: int
        """

        self._id = id

    @property
    def account_id(self) -> int:
        """Gets the account_id of this Transaction.


        :return: The account_id of this Transaction.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: int):
        """Sets the account_id of this Transaction.


        :param account_id: The account_id of this Transaction.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def amount(self) -> int:
        """Gets the amount of this Transaction.


        :return: The amount of this Transaction.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.
        :type amount: int
        """

        self._amount = amount

    @property
    def description(self) -> str:
        """Gets the description of this Transaction.


        :return: The description of this Transaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Transaction.


        :param description: The description of this Transaction.
        :type description: str
        """

        self._description = description

    @property
    def current_balance(self) -> int:
        """Gets the current_balance of this Transaction.


        :return: The current_balance of this Transaction.
        :rtype: int
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance: int):
        """Sets the current_balance of this Transaction.


        :param current_balance: The current_balance of this Transaction.
        :type current_balance: int
        """

        self._current_balance = current_balance

    @property
    def transaction_date(self) -> str:
        """Gets the transaction_date of this Transaction.


        :return: The transaction_date of this Transaction.
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date: str):
        """Sets the transaction_date of this Transaction.


        :param transaction_date: The transaction_date of this Transaction.
        :type transaction_date: str
        """

        self._transaction_date = transaction_date
